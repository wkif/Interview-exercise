[
    {
        "id": "/bank/1810644197003362306/question/1810654506023694337",
        "answer": "HTML 中的 `src` 和 `href` 属性都是用来指定资源的链接，但它们各自有不同的用途和应用场景：\n\n1. **`src` 属性**：\n   - `src` 属性通常用于指定外部资源的路径，这些资源会被嵌入到当前文档中。\n   - 它主要用于 `<script>`、`<img>`、`<iframe>`、`<embed>` 和 `<video>` 等标签，用于加载脚本、图片、视频等。\n   - 当浏览器遇到带有 `src` 属性的标签时，会暂停当前文档的解析，去加载指定的资源，然后继续解析文档。\n   - `src` 属性的值是绝对或相对的URL，指向外部资源。\n\n2. **`href` 属性**：\n   - `href` 属性用于指定超链接的目的地，即用户点击链接后将被导航到的URL。\n   - 它主要用于 `<a>`（链接）、`<link>`（链接到外部资源，如CSS文件）和 `<base>`（指定文档中所有相对URL的基础URL）等标签。\n   - `href` 属性的值也是绝对或相对的URL，但它不会导致文档暂停解析，而是定义了链接的目标地址。\n   - 用户可以通过点击带有 `href` 属性的元素来访问链接指向的资源。\n\n总结来说，`src` 属性用于嵌入资源，而 `href` 属性用于定义链接的目标地址。两者虽然都涉及URL，但它们的功能和使用场景是不同的。"
    },
    {
        "id": "/bank/1810644197003362306/question/1810654507105824769",
        "answer": "HTML 语义化是指使用合适的 HTML 标签来表达网页内容的结构和意义，使得网页的结构更加清晰、易于理解。这样做的好处包括：\n\n1. **提高可读性**：使用语义化的标签可以让开发者和阅读代码的人更容易理解网页的结构和内容。\n\n2. **提高可访问性**：对于使用屏幕阅读器等辅助技术的用户，语义化的标签有助于他们更好地理解网页内容。\n\n3. **改善搜索引擎优化（SEO）**：搜索引擎倾向于对结构清晰、语义明确的网页给予更好的排名。\n\n4. **提高维护性**：当网页结构清晰时，维护和更新网页的工作会变得更加容易。\n\n5. **更好的响应式设计**：使用语义化的标签有助于创建更加灵活和响应式的网页布局。\n\n常见的语义化 HTML 标签包括：\n\n- `<header>`：定义文档或部分的页眉。\n- `<nav>`：定义导航链接的容器。\n- `<section>`：定义文档中的一个区段。\n- `<article>`：定义独立的自包含内容。\n- `<aside>`：定义与页面内容略微相关的侧边栏内容。\n- `<footer>`：定义文档或部分的页脚。\n- `<figure>` 和 `<figcaption>`：定义图像或图表及其标题。\n- `<header>`：定义文档或部分的页眉。\n- `<main>`：定义文档的主要内容。\n- `<section>`：定义文档中的一个区段。\n- `<article>`：定义独立的自包含内容。\n- `<div>` 和 `<span>`：虽然它们是通用容器，但应谨慎使用，避免过度依赖它们来构建布局。\n\n使用语义化的 HTML 标签是现代网页设计和开发的最佳实践之一。"
    },
    {
        "id": "/bank/1810644197003362306/question/1810654507466534913",
        "answer": "在HTML中，`<script>`标签用于引入JavaScript文件或脚本。`defer`和`async`是两个属性，它们控制脚本的加载和执行方式，但它们之间有一些关键的区别：\n\n1. **加载和解析时机**：\n   - `async`：当浏览器遇到带有`async`属性的`<script>`标签时，它会立即开始下载脚本，但不会阻塞页面的解析。脚本下载完成后，会立即执行，这可能会阻塞主线程，直到脚本执行完成。\n   - `defer`：当浏览器遇到带有`defer`属性的`<script>`标签时，它会下载脚本，但不会立即执行。脚本的执行会被推迟到整个页面解析完成后，即在DOMContentLoaded事件之前。这意味着所有带有`defer`属性的脚本会按照它们在文档中出现的顺序执行。\n\n2. **执行顺序**：\n   - `async`：脚本的执行顺序是不确定的，它依赖于脚本文件的下载速度。如果多个`async`脚本同时下载完成，它们的执行顺序是不确定的。\n   - `defer`：脚本的执行顺序是按照它们在HTML文档中出现的顺序。这保证了脚本之间的依赖关系可以按照预期的顺序执行。\n\n3. **用途**：\n   - `async`：适用于那些不依赖于其他脚本的独立脚本，或者那些可以异步加载而不会影响页面功能的脚本。\n   - `defer`：适用于那些需要在文档解析完成后立即执行的脚本，或者那些有依赖关系的脚本。\n\n4. **兼容性**：\n   - `async`和`defer`都是HTML5引入的特性，现代浏览器都支持这两个属性。但是，如果你需要支持旧版浏览器，可能需要考虑使用其他方法来控制脚本的加载和执行。\n\n总结来说，`async`适合用于那些可以独立执行且不依赖于页面其他部分的脚本，而`defer`适合用于那些需要在页面解析完成后按顺序执行的脚本。"
    }
]